Вот полный код простейшего мини-приложения на Qt 6.4.2 с кнопкой для формирования PDF файла:

```cpp
#include <QApplication>
#include <QPushButton>
#include <QFileDialog>
#include <QPdfWriter>
#include <QPainter>
#include <QFont>
#include <QRect>

void generatePDF() {
    // Текстовые переменные для вывода в PDF
    QString headerText = "Заголовок документа";
    QString text1 = "Текст 1";
    QString text2 = "Текст 2";
    QString text3 = "Текст 3";
    
    // Выбор места сохранения файла
    QString fileName = QFileDialog::getSaveFileName(nullptr, "Сохранить PDF", "", "PDF файлы (*.pdf)");
    if (fileName.isEmpty())
        return;
    
    // Создание PDF-документа
    QPdfWriter pdfWriter(fileName);
    pdfWriter.setPageSize(QPageSize(QPageSize::A4));
    pdfWriter.setResolution(300); // 300 DPI
    
    QPainter painter(&pdfWriter);
    
    // Установка шрифтов
    QFont headerFont("Arial", 16, QFont::Bold);
    QFont textFont("Arial", 12);
    
    // Рисуем заголовок вверху листа
    painter.setFont(headerFont);
    painter.drawText(QRect(0, 50, pdfWriter.width(), 50), Qt::AlignCenter, headerText);
    
    // Рисуем горизонтальную линию под заголовком
    painter.drawLine(50, 120, pdfWriter.width() - 50, 120);
    
    // Вычисляем ширину для трех колонок
    int columnWidth = (pdfWriter.width() - 200) / 3; // 200 - отступы слева и справа
    int startY = 200;
    
    // Рисуем три текстовых блока в один ряд
    painter.setFont(textFont);
    
    // Первый блок с рамкой
    painter.drawRect(50, startY, columnWidth, 100);
    painter.drawText(QRect(50, startY, columnWidth, 100), Qt::AlignCenter, text1);
    
    // Второй блок с рамкой (с отступом)
    painter.drawRect(100 + columnWidth, startY, columnWidth, 100);
    painter.drawText(QRect(100 + columnWidth, startY, columnWidth, 100), Qt::AlignCenter, text2);
    
    // Третий блок с рамкой (с отступом)
    painter.drawRect(150 + 2 * columnWidth, startY, columnWidth, 100);
    painter.drawText(QRect(150 + 2 * columnWidth, startY, columnWidth, 100), Qt::AlignCenter, text3);
    
    painter.end();
}

int main(int argc, char *argv[]) {
    QApplication app(argc, argv);
    
    // Создаем главное окно
    QWidget window;
    window.setWindowTitle("Генератор PDF");
    window.resize(300, 200);
    
    // Создаем кнопку
    QPushButton button("Создать PDF", &window);
    button.setGeometry(50, 50, 200, 50);
    
    // Подключаем сигнал кнопки к функции генерации PDF
    QObject::connect(&button, &QPushButton::clicked, &generatePDF);
    
    window.show();
    return app.exec();
}
```

### Как это работает:

1. Приложение создает простое окно с одной кнопкой "Создать PDF"
2. При нажатии кнопки открывается диалог сохранения файла
3. Создается PDF-документ с:
   - Заголовком вверху страницы
   - Тремя текстовыми блоками в один ряд ниже
   - Каждый блок имеет простую прямоугольную рамку
   - Между блоками есть промежутки

### Требования:
- Qt 6.4.2
- Модуль QtPdf (должен быть включен в проект)

### Для сборки добавьте в файл CMakeLists.txt:
```cmake
find_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets Pdf)
target_link_libraries(your_target_name PRIVATE Qt6::Core Qt6::Gui Qt6::Widgets Qt6::Pdf)
```

Это минимальный пример без использования HTML/CSS, полностью на основе QPainter. Вы можете легко модифицировать шрифты, размеры и расположение элементов.

-----------

Модуль **QtPdf** в Qt 6.4.2 нужен для работы с PDF-файлами программным способом. В данном примере он используется для:  

### 1. **Создания PDF-документа (`QPdfWriter`)**  
   - `QPdfWriter` — это класс, который позволяет генерировать PDF-файлы напрямую, без использования HTML/CSS.  
   - Он работает как "виртуальное устройство" (как принтер), в которое можно рисовать с помощью `QPainter`.  

### 2. **Формирования содержимого (`QPainter` + `QPdfWriter`)**  
   - `QPainter` рисует текст, линии, прямоугольники и другие элементы прямо в PDF.  
   - Без модуля `QtPdf` класс `QPdfWriter` будет недоступен, и приложение не скомпилируется.  

---

### **Как подключить QtPdf в проект?**  
#### **1. В CMakeLists.txt (если используете CMake)**  
Добавьте:  
```cmake
find_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets Pdf)  # Подключаем модуль QtPdf
target_link_libraries(ваш_проект PRIVATE Qt6::Core Qt6::Gui Qt6::Widgets Qt6::Pdf)
```

#### **2. В qmake (если используете .pro-файл)**  
Добавьте:  
```qmake
QT += core gui widgets pdf
```

#### **3. Проверьте, установлен ли модуль QtPdf**  
Если при сборке возникает ошибка, что `QPdfWriter` не найден, значит:  
- В вашей версии Qt модуль `QtPdf` не установлен.  
- Убедитесь, что при установке Qt вы выбрали компонент **Qt PDF** (или переустановите Qt с этим модулем).  

---

### **Альтернатива, если QtPdf недоступен**  
Если по какой-то причине модуль `QtPdf` не работает, можно использовать:  
1. **QPrinter в режиме PDF** (старый способ, но работает):  
   ```cpp
   QPrinter printer(QPrinter::HighResolution);
   printer.setOutputFormat(QPrinter::PdfFormat);
   printer.setOutputFileName("output.pdf");
   QPainter painter(&printer);
   painter.drawText(100, 100, "Пример текста в PDF");
   painter.end();
   ```  
   (Но `QPdfWriter` удобнее, так как он специализирован именно для PDF.)  

2. **Сторонние библиотеки** (например, PoDoFo, libharu), но они усложняют проект.  

---

### **Вывод**  
Модуль **QtPdf** нужен для:  
✅ Доступа к `QPdfWriter` — основному инструменту генерации PDF в Qt.  
✅ Прямого рисования в PDF через `QPainter` без HTML/CSS.  
✅ Простого управления размерами, шрифтами и графикой в PDF.  

Если его не подключить, код с `QPdfWriter` не скомпилируется.